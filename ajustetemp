<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel Profissional de Ocorrências</title>
    <!-- Carrega Tailwind CSS para estilização moderna e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Define a fonte Inter como padrão */
        :root {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 min-h-screen p-4 sm:p-8">

    <div class="max-w-7xl mx-auto">
        <!-- Título do Painel -->
        <h1 class="text-3xl sm:text-4xl font-extrabold text-white mb-6 border-b-2 border-indigo-500 pb-2">
            Ocorrências em Andamento
        </h1>

        <!-- Controles/Filtros (Simulação) -->
        <div class="flex flex-col sm:flex-row gap-4 mb-8">
            <select id="filterStatus" class="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-lg transition duration-150 ease-in-out cursor-pointer">
                <option value="all">Todos os Status</option>
                <option value="Em Andamento">Em Andamento</option>
                <option value="Pendente">Pendente</option>
                <option value="Urgente">Urgente</option>
            </select>
            <select id="filterPriority" class="p-3 bg-gray-800 border border-gray-700 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-lg transition duration-150 ease-in-out cursor-pointer">
                <option value="all">Todas as Prioridades</option>
                <option value="Alta">Alta</option>
                <option value="Média">Média</option>
                <option value="Baixa">Baixa</option>
            </select>
        </div>

        <!-- Grid de Ocorrências (Será preenchido pelo JavaScript) -->
        <div id="occurrences-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Cards de Ocorrência Vão Aqui -->
        </div>

        <!-- Mensagem de Nenhuma Ocorrência -->
        <p id="no-occurrences" class="text-center text-gray-500 mt-12 hidden">
            Nenhuma ocorrência encontrada com os filtros atuais.
        </p>

    </div>

    <script>
        // Dados de amostra para simular ocorrências em um ambiente real
        const sampleOccurrences = [
            { id: 'A1B2C3D', status: 'Urgente', description: 'Falha crítica no sistema de pagamentos. Impacto: Alto.', priority: 'Alta', created: '10/07/2025 15:00', assignee: 'Equipe Infra' },
            { id: 'E4F5G6H', status: 'Em Andamento', description: 'Otimização de consultas SQL no módulo de relatórios.', priority: 'Média', created: '10/07/2025 14:00', assignee: 'Desenvolvimento A' },
            { id: 'I7J8K9L', status: 'Pendente', description: 'Revisão da documentação de integração do novo serviço.', priority: 'Baixa', created: '10/07/2025 10:30', assignee: 'Documentação' },
            { id: 'M0N1O2P', status: 'Em Andamento', description: 'Correção de bug visual na página de perfil do usuário.', priority: 'Média', created: '10/07/2025 09:00', assignee: 'Desenvolvimento B' },
            { id: 'Q3R4S5T', status: 'Urgente', description: 'Servidor de cache esgotou o espaço em disco. Intermitência no serviço.', priority: 'Alta', created: '10/07/2025 13:45', assignee: 'Equipe Infra' },
            { id: 'U6V7W8X', status: 'Pendente', description: 'Solicitação de aumento de limite de armazenamento para logs antigos.', priority: 'Baixa', created: '09/07/2025 17:00', assignee: 'Gerência' },
        ];

        // Função utilitária para mapear status a cores e classes Tailwind
        function getStatusClasses(status) {
            switch (status) {
                case 'Urgente':
                    return {
                        bg: 'bg-red-900/50 border-red-500 hover:shadow-red-500/30',
                        text: 'text-red-400',
                        dot: 'bg-red-500'
                    };
                case 'Em Andamento':
                    return {
                        bg: 'bg-blue-900/50 border-blue-500 hover:shadow-blue-500/30',
                        text: 'text-blue-400',
                        dot: 'bg-blue-500'
                    };
                case 'Pendente':
                    return {
                        bg: 'bg-yellow-900/50 border-yellow-500 hover:shadow-yellow-500/30',
                        text: 'text-yellow-400',
                        dot: 'bg-yellow-500'
                    };
                default:
                    return {
                        bg: 'bg-gray-800 border-gray-700 hover:shadow-gray-700/30',
                        text: 'text-gray-400',
                        dot: 'bg-gray-500'
                    };
            }
        }

        // Função para renderizar as ocorrências na tela
        function renderOccurrences(occurrencesToRender) {
            const grid = document.getElementById('occurrences-grid');
            const noOccurrencesMessage = document.getElementById('no-occurrences');
            grid.innerHTML = ''; // Limpa o grid

            if (occurrencesToRender.length === 0) {
                noOccurrencesMessage.classList.remove('hidden');
                return;
            } else {
                noOccurrencesMessage.classList.add('hidden');
            }

            // Cria um card para cada ocorrência
            occurrencesToRender.forEach(occurrence => {
                const statusInfo = getStatusClasses(occurrence.status);
                
                const card = document.createElement('div');
                card.className = `p-6 rounded-xl border-t-4 transition duration-300 ease-in-out transform hover:scale-[1.01] cursor-pointer shadow-xl ${statusInfo.bg}`;
                
                // Mapeamento de prioridade para cor de texto
                let priorityColor = 'text-gray-500';
                if (occurrence.priority === 'Alta') priorityColor = 'text-red-500 font-bold';
                else if (occurrence.priority === 'Média') priorityColor = 'text-yellow-500';
                else if (occurrence.priority === 'Baixa') priorityColor = 'text-green-500';

                card.innerHTML = `
                    <div class="flex justify-between items-start mb-3">
                        <!-- ID e Status -->
                        <div class="flex items-center space-x-2">
                            <span class="text-sm font-semibold text-gray-400">${occurrence.id}</span>
                            <span class="w-2 h-2 rounded-full ${statusInfo.dot}"></span>
                            <span class="text-xs font-medium px-2 py-0.5 rounded-full ${statusInfo.text} ${statusInfo.dot.replace('bg-', 'bg-').replace('500', '900/30')} border border-current">
                                ${occurrence.status}
                            </span>
                        </div>
                        <!-- Prioridade -->
                        <span class="text-xs font-semibold ${priorityColor} p-1 rounded">
                            Prioridade: ${occurrence.priority}
                        </span>
                    </div>

                    <!-- Descrição da Ocorrência -->
                    <h2 class="text-lg font-bold text-white mb-2 line-clamp-2">
                        ${occurrence.description}
                    </h2>

                    <!-- Detalhes Adicionais -->
                    <div class="text-xs text-gray-400 space-y-1">
                        <p><strong>Responsável:</strong> ${occurrence.assignee || 'Não Atribuído'}</p>
                        <p><strong>Aberto em:</strong> ${occurrence.created}</p>
                    </div>
                `;
                
                grid.appendChild(card);
            });
        }

        // Função de filtro principal
        function filterAndRender() {
            const selectedStatus = document.getElementById('filterStatus').value;
            const selectedPriority = document.getElementById('filterPriority').value;
            
            const filtered = sampleOccurrences.filter(occurrence => {
                const statusMatch = selectedStatus === 'all' || occurrence.status === selectedStatus;
                const priorityMatch = selectedPriority === 'all' || occurrence.priority === selectedPriority;
                return statusMatch && priorityMatch;
            });
            
            renderOccurrences(filtered);
        }

        // Adiciona event listeners aos filtros
        document.getElementById('filterStatus').addEventListener('change', filterAndRender);
        document.getElementById('filterPriority').addEventListener('change', filterAndRender);

        // Renderiza a visualização inicial ao carregar a página
        window.onload = filterAndRender;
    </script>
</body>
</html>
